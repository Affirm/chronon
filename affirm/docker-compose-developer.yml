# Enhanced Chronon Docker Compose with Spark + Iceberg + MongoDB + S3 + Airflow

services:

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MongoDB - Chronon's built-in KV store support
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongodb_data:/opt/mongo/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Note: Polaris removed for simplicity - using Spark's built-in Hive catalog instead
  # This is sufficient for local GroupBy development and testing

  # Airflow Webserver (OPTIONAL - comment out if you don't need orchestration)
  airflow-webserver:
    image: apache/airflow:2.5.3
    ports:
      - "8085:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: webserver
    depends_on:
      - airflow-db
      - airflow-scheduler
    # Simplified health check - just check if container is running
    # Airflow webserver can take time to fully initialize

  # Airflow Scheduler (OPTIONAL - comment out if you don't need orchestration)
  airflow-scheduler:
    image: apache/airflow:2.5.3
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@airflow-db:5432/airflow
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - _PIP_ADDITIONAL_REQUIREMENTS=apache-airflow-providers-postgres
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    command: scheduler
    depends_on:
      - airflow-db
    # Simplified health check - just check if container is running
    # Airflow scheduler can take time to fully initialize

  # Airflow Database (PostgreSQL) - Using PostgreSQL 13 with legacy authentication
  airflow-db:
    image: postgres:13
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_INITDB_ARGS: "--auth-host=md5 --auth-local=md5"
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # DynamoDB Local
  dynamodb-local:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /data"
    volumes:
      - dynamodb_data:/data
    # Note: DynamoDB Local doesn't have curl, so we skip health check
    # The service will be considered ready when the container starts

  # Spark Master
  spark-master:
    image: apache/spark:3.5.2
    ports:
      - "8080:8080"
      - "7077:7077"
    environment:
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: "7077"
      SPARK_MASTER_WEBUI_PORT: "8080"
      SPARK_DAEMON_JAVA_OPTS: -Dspark.deploy.recoveryMode=FILESYSTEM -Dspark.deploy.recoveryDirectory=/tmp/spark-recovery
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
    command:
      [
        "/opt/spark/bin/spark-class","org.apache.spark.deploy.master.Master",
        "--host","spark-master","--port","7077","--webui-port","8080"
      ]
    volumes:
      - spark_events:/opt/spark/spark-events
    healthcheck:
      test: ["CMD-SHELL", "ps -ef | grep -q '[o]rg.apache.spark.deploy.master.Master' || exit 1; wget -qO- http://127.0.0.1:8080 >/dev/null || true"]
      interval: 5s
      timeout: 5s
      retries: 24
      start_period: 5s
    restart: unless-stopped

  spark-worker:
    image: apache/spark:3.5.2
    depends_on:
      spark-master:
        condition: service_healthy
      minio:
        condition: service_started
    command:
      [
        "/opt/spark/bin/spark-class","org.apache.spark.deploy.worker.Worker",
        "spark://spark-master:7077",
        "--cores","2","--memory","2G",
        "--webui-port","8081"
      ]
    environment:
      SPARK_WORKER_DIR: /opt/spark/work-dir
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
    volumes:
      - spark_events:/opt/spark/spark-events
    restart: unless-stopped

    
  # Chronon Main Container with all components
  chronon-main:
    image: ezvz/chronon
    command: bash -c "spark-shell -i scripts/data-loader.scala && tail -f /dev/null"
    ports:
      - "4040:4040"  # Spark UI
      - "4041:4041"  # Spark UI (backup)
    environment:
      USER: root
      SPARK_SUBMIT_PATH: spark-submit
      PYTHONPATH: /srv/chronon
      SPARK_VERSION: "3.5.2"
      JOB_MODE: spark://spark-master:7077
      PARALLELISM: "4"
      EXECUTOR_MEMORY: 2G
      EXECUTOR_CORES: "2"
      DRIVER_MEMORY: 1G
      CHRONON_LOG_TABLE: default.chronon_log_table
      CHRONON_ONLINE_CLASS: ai.chronon.quickstart.online.ChrononMongoOnlineImpl
      CHRONON_ONLINE_ARGS: -Zuser=admin -Zpassword=admin -Zhost=mongodb -Zport=27017 -Zdatabase=admin
      SPARK_CHRONON_TABLE_WRITE_FORMAT: iceberg
      SPARK_CHRONON_TABLE_READ_FORMAT: iceberg
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      AWS_REGION: us-east-1
      S3_ENDPOINT: http://minio:9000
      S3_PATH_STYLE_ACCESS: "true"
      # DynamoDB Configuration
      AWS_DEFAULT_REGION: us-east-1
      DYNAMODB_ENDPOINT: http://dynamodb:8000

      # === Iceberg Configuration with Hadoop catalog ===
      PYSPARK_SUBMIT_ARGS: >
        --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.10.0,org.apache.hadoop:hadoop-aws:3.3.4
        --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions
        --conf spark.sql.defaultCatalog=spark_catalog
        --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkCatalog
        --conf spark.sql.catalog.spark_catalog.type=hadoop
        --conf spark.sql.catalog.spark_catalog.warehouse=s3a://chronon/warehouse
        --conf spark.hadoop.fs.s3a.endpoint=http://minio:9000
        --conf spark.hadoop.fs.s3a.path.style.access=true
        --conf spark.hadoop.fs.s3a.access.key=minioadmin
        --conf spark.hadoop.fs.s3a.secret.key=minioadmin
        --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem
        --conf spark.hadoop.fs.s3a.aws.credentials.provider=org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
        pyspark-shell
    volumes:
      - ../api/py/test/sample:/srv/chronon
      - ./scripts:/srv/scripts
      - spark_events:/opt/spark/spark-events
    depends_on:
      - spark-master
      - minio
      - mongodb
      - airflow-webserver
      - dynamodb-local

  # Jupyter Notebook for development (ESSENTIAL for GroupBy verification)
  jupyter:
    image: jupyter/pyspark-notebook:latest
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      SPARK_MASTER: spark://spark-master:7077
      JUPYTER_TOKEN: chronon-dev

      # === Iceberg Configuration with Hadoop catalog ===
      PYSPARK_SUBMIT_ARGS: >
        --packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.10.0,org.apache.hadoop:hadoop-aws:3.3.4
        --conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions
        --conf spark.sql.defaultCatalog=spark_catalog
        --conf spark.sql.catalog.spark_catalog=org.apache.iceberg.spark.SparkCatalog
        --conf spark.sql.catalog.spark_catalog.type=hadoop
        --conf spark.sql.catalog.spark_catalog.warehouse=s3a://chronon/warehouse
        --conf spark.hadoop.fs.s3a.endpoint=http://minio:9000
        --conf spark.hadoop.fs.s3a.path.style.access=true
        --conf spark.hadoop.fs.s3a.access.key=minioadmin
        --conf spark.hadoop.fs.s3a.secret.key=minioadmin
        --conf spark.hadoop.fs.s3a.impl=org.apache.hadoop.fs.s3a.S3AFileSystem
        --conf spark.hadoop.fs.s3a.aws.credentials.provider=org.apache.hadoop.fs.s3a.SimpleAWSCredentialsProvider
        pyspark-shell
    volumes:
      - ../api/py:/home/jovyan/work/chronon-api
      - ../api/py/test/sample:/home/jovyan/work/sample-data
    depends_on:
      - spark-master
      - chronon-main

volumes:
  minio_data:
  mongodb_data:
  airflow_db_data:
  dynamodb_data:
  spark_events:
